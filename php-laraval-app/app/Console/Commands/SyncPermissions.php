<?php

namespace App\Console\Commands;

use App\Models\Permission;
use Artisan;
use DB;
use File;
use Illuminate\Console\Command;

class SyncPermissions extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'permissions:sync {--all}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Sync permissions in config/permissions.php to DB and'
        .' to app/Enums/PermissionsEnum.php and resources/js/constants/permission.ts';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->writePermissionsEnum();
        $this->writePermissionsTypescript();

        if ($this->option('all')) {
            if (app()->environment('local')) {
                try {
                    DB::statement('SET FOREIGN_KEY_CHECKS=0;');
                    DB::table('permissions')->truncate();
                    DB::table('role_has_permissions')->truncate();
                    DB::statement('SET FOREIGN_KEY_CHECKS=1;');

                    Artisan::call('db:seed', ['--class' => 'PermissionsSeeder']);
                    Artisan::call('db:seed', ['--class' => 'RolesSeeder']);
                } catch (\Exception $e) {
                    // do nothing
                }

                return;
            }

            $dbPermissions = Permission::all();
            $configPermissions = collect(config('permissions'));

            if ($dbPermissions->count() === $configPermissions->count()) {
                return;
            }

            $removedPermissions = $dbPermissions->diffUsing($configPermissions, function ($item1, $item2) {
                $value1 = is_array($item1) ? $item1['value'] : $item1->name;
                $value2 = is_array($item2) ? $item2['value'] : $item2->name;

                return $value1 <=> $value2;
            });
            $addedPermissions = $configPermissions->diffUsing($dbPermissions, function ($item1, $item2) {
                $value1 = is_array($item1) ? $item1['value'] : $item1->name;
                $value2 = is_array($item2) ? $item2['value'] : $item2->name;

                return $value1 <=> $value2;
            });

            if ($removedPermissions->count() > 0) {
                $removedIds = $removedPermissions->pluck('id')->join(',');
                DB::statement("
                    DELETE FROM permissions
                    WHERE id IN ($removedIds)
                ");
            }

            if ($addedPermissions->count() > 0) {
                $permissions = $addedPermissions->map(function ($permission) {
                    return [
                        'name' => $permission['value'],
                        'guard_name' => 'web',
                        'created_at' => now(),
                        'updated_at' => now(),
                    ];
                });

                Permission::insert($permissions->toArray());
            }
        }
    }

    /**
     * Write to app/Enums/PermissionsEnum.php
     */
    private function writePermissionsEnum()
    {
        $permissions = config('permissions');

        $content = <<<'EOT'
        <?php

        // THIS FILE IS AUTO-GENERATED. DO NOT EDIT THIS FILE MANUALLY.

        namespace App\Enums;

        use ArchTech\Enums\InvokableCases;
        use ArchTech\Enums\Values;

        enum PermissionsEnum: string
        {
            use InvokableCases;
            use Values;

        %s
        }

        EOT;

        $enums = [];

        foreach ($permissions as $permission) {
            $value = $permission['value'];
            $name = implode('', array_map(fn ($word) => ucfirst($word), explode(' ', $value)));

            $enums[] = "    case {$name} = '{$value}';";
        }

        File::put(app_path('Enums/PermissionsEnum.php'), sprintf($content, implode("\n", $enums)));
    }

    /**
     * Write to resources/js/constants/permission.ts
     */
    private function writePermissionsTypescript()
    {
        $permissions = config('permissions');

        $content = <<<'EOT'
        // THIS FILE IS AUTO-GENERATED. DO NOT EDIT THIS FILE MANUALLY.

        const PERMISSIONS = %s as const;

        export default PERMISSIONS;

        EOT;

        $item = [];

        foreach ($permissions as $permission) {
            $item[$permission['value']] = $permission;
        }

        File::put(
            resource_path('js/constants/permission.ts'),
            sprintf($content, json_encode($item, JSON_PRETTY_PRINT))
        );
    }
}
