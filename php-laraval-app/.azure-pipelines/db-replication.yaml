trigger: none
pr: none

schedules:
  - cron: "0 0 1 * *"
    displayName: "Monthly database replication"
    branches:
      include:
        - main
    always: "true"

pool:
  vmImage: ubuntu-latest

variables:
  - group: laravel-app

steps:
  - task: DownloadSecureFile@1
    name: mysqlRootCA
    inputs:
      secureFile: MySQLRootCA.crt.pem

  - bash: |
      echo "Replicating database..."

      echo "Get list of tables in production database..."
      PRODUCTION_TABLES=$(mysql -h $PRODUCTION_DB_HOST \
        -u $PRODUCTION_DB_USER \
        -p$PRODUCTION_DB_PASSWORD \
        --ssl-ca=$CA_PATH \
        $PRODUCTION_DB_NAME -e "SHOW TABLES;" -s --skip-column-names)

      echo "Backup production database..."
      mysqldump --single-transaction \
        --ignore-table=$PRODUCTION_DB_NAME.oauth_remote_tokens \
        -h $PRODUCTION_DB_HOST \
        -u $PRODUCTION_DB_USER \
        -p$PRODUCTION_DB_PASSWORD \
        --ssl-ca=$CA_PATH \
        $PRODUCTION_DB_NAME > production.sql

      # Replace production user with staging user
      sed -i "s/$PRODUCTION_DB_USER/$STAGING_DB_USER/g" production.sql

      echo "Get list of tables in staging database..."
      STAGING_TABLES=$(mysql -h $STAGING_DB_HOST \
        -u $STAGING_DB_USER \
        -p$STAGING_DB_PASSWORD \
        $STAGING_DB_NAME -e "SHOW TABLES;" -s --skip-column-names)

      echo "Drop the non-existing tables between production and staging in staging database..."
      for table in ${STAGING_TABLES[@]}; do
        if [[ -z $(echo "$PRODUCTION_TABLES" | grep "^$table$") ]]; then
          echo "Dropping table $table..."
          mysql -h $STAGING_DB_HOST \
            -u $STAGING_DB_USER \
            -p$STAGING_DB_PASSWORD \
            $STAGING_DB_NAME -e "SET FOREIGN_KEY_CHECKS=0; DROP TABLE $table; SET FOREIGN_KEY_CHECKS=1;"
        fi
      done

      echo "Restore production database to staging..."
      mysql -h $STAGING_DB_HOST \
        -u $STAGING_DB_USER \
        -p$STAGING_DB_PASSWORD \
        $STAGING_DB_NAME < production.sql

      echo "Database replication completed."
    env:
      CA_PATH: $(mysqlRootCA.secureFilePath)
      PRODUCTION_DB_HOST: $(PRODUCTION_DB_HOST)
      PRODUCTION_DB_USER: $(PRODUCTION_DB_USER)
      PRODUCTION_DB_PASSWORD: $(PRODUCTION_DB_PASSWORD)
      PRODUCTION_DB_NAME: $(PRODUCTION_DB_NAME)
      STAGING_DB_HOST: $(STAGING_DB_HOST)
      STAGING_DB_USER: $(STAGING_DB_USER)
      STAGING_DB_PASSWORD: $(STAGING_DB_PASSWORD)
      STAGING_DB_NAME: $(STAGING_DB_NAME)
    displayName: Replicate database

  - task: AzureAppServiceManage@0
    displayName: Restart staging app service
    inputs:
      azureSubscription: ARM-staging-downstairs
      action: Restart Azure App Service
      WebAppName: $(STAGING_APP_NAME)

  - bash: |
      sudo apt update
      sudo apt install redis
      redis-cli -h $REDIS_HOST -p $REDIS_PORT --tls flushall
    displayName: Clear staging Redis caches
    env:
      REDIS_HOST: $(STAGING_REDIS_HOST)
      REDIS_PORT: $(STAGING_REDIS_PORT)
      REDISCLI_AUTH: $(STAGING_REDIS_PASSWORD)
