// <auto-generated />
using System;
using Downstairs.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Downstairs.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DownstairsDbContext))]
    [Migration("20251017145726_InitialStructure")]
    partial class InitialStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("BatchUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("batch_uuid");

                    b.Property<long?>("CauserId")
                        .HasColumnType("bigint")
                        .HasColumnName("causer_id");

                    b.Property<string>("CauserType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("causer_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Event")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("event");

                    b.Property<string>("LogName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("log_name");

                    b.Property<string>("Properties")
                        .HasColumnType("json")
                        .HasColumnName("properties");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<string>("SubjectType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subject_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedAt" }, "activity_log_created_at_index");

                    b.HasIndex(new[] { "LogName" }, "activity_log_log_name_index");

                    b.HasIndex(new[] { "CauserType", "CauserId" }, "causer");

                    b.HasIndex(new[] { "SubjectType", "SubjectId" }, "subject");

                    b.ToTable("activity_log", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Accuracy")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("accuracy");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Address2")
                        .HasColumnType("text")
                        .HasColumnName("address_2");

                    b.Property<string>("Area")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("area");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("city_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("postal_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CityId" }, "addresses_city_id_foreign");

                    b.ToTable("addresses", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.AuthenticationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthenticatableId")
                        .HasColumnType("bigint")
                        .HasColumnName("authenticatable_id");

                    b.Property<string>("AuthenticatableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("authenticatable_type");

                    b.Property<bool>("ClearedByUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cleared_by_user");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Location")
                        .HasColumnType("json")
                        .HasColumnName("location");

                    b.Property<DateTime?>("LoginAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("login_at");

                    b.Property<bool>("LoginSuccessful")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("login_successful");

                    b.Property<DateTime?>("LogoutAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("logout_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AuthenticatableType", "AuthenticatableId" }, "authentication_log_authenticatable_type_authenticatable_id_index");

                    b.ToTable("authentication_log", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.BlindIndex", b =>
                {
                    b.Property<long>("MyRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("my_row_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("MyRowId"));

                    b.Property<long>("IndexableId")
                        .HasColumnType("bigint")
                        .HasColumnName("indexable_id");

                    b.Property<string>("IndexableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("indexable_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("MyRowId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IndexableType", "IndexableId" }, "blind_indexes_indexable_type_indexable_id_index");

                    b.HasIndex(new[] { "IndexableType", "IndexableId", "Name" }, "blind_indexes_indexable_type_indexable_id_name_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Name", "Value" }, "blind_indexes_name_value_index");

                    b.ToTable("blind_indexes", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.BlockDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("BlockDate")
                        .HasColumnType("date")
                        .HasColumnName("block_date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<TimeOnly?>("EndBlockTime")
                        .HasColumnType("time")
                        .HasColumnName("end_block_time");

                    b.Property<TimeOnly?>("StartBlockTime")
                        .HasColumnType("time")
                        .HasColumnName("start_block_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("block_days", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CountryId" }, "cities_country_id_foreign");

                    b.ToTable("cities", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency")
                        .IsFixedLength();

                    b.Property<string>("DialCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dial_code");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("countries", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Credit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte>("InitialAmount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("initial_amount");

                    b.Property<long?>("IssuerId")
                        .HasColumnType("bigint")
                        .HasColumnName("issuer_id");

                    b.Property<byte>("RemainingAmount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("remaining_amount");

                    b.Property<long?>("ScheduleCleaningId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp")
                        .HasColumnName("valid_until");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IssuerId" }, "credits_issuer_id_foreign");

                    b.HasIndex(new[] { "ScheduleCleaningId" }, "credits_schedule_cleaning_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "credits_user_id_foreign");

                    b.HasIndex(new[] { "ValidUntil" }, "credits_valid_until_index");

                    b.ToTable("credits", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CreditCreditTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("Amount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("amount");

                    b.Property<long>("CreditId")
                        .HasColumnType("bigint")
                        .HasColumnName("credit_id");

                    b.Property<long>("CreditTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("credit_transaction_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreditId" }, "credit_credit_transaction_credit_id_foreign");

                    b.HasIndex(new[] { "CreditTransactionId" }, "credit_credit_transaction_credit_transaction_id_foreign");

                    b.ToTable("credit_credit_transaction", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CreditTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("IssuerId")
                        .HasColumnType("bigint")
                        .HasColumnName("issuer_id");

                    b.Property<long?>("ScheduleCleaningId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_id");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("total_amount");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IssuerId" }, "credit_transactions_issuer_id_foreign");

                    b.HasIndex(new[] { "ScheduleCleaningId" }, "credit_transactions_schedule_cleaning_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "credit_transactions_user_id_foreign");

                    b.ToTable("credit_transactions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CustomTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("TaskableId")
                        .HasColumnType("bigint")
                        .HasColumnName("taskable_id");

                    b.Property<string>("TaskableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("taskable_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskableType", "TaskableId" }, "taskable_index");

                    b.ToTable("custom_tasks", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CustomerRefId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_ref_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DialCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dial_code");

                    b.Property<short>("DueDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("due_days")
                        .HasDefaultValueSql("'30'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FortnoxId")
                        .HasColumnType("text")
                        .HasColumnName("fortnox_id");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_number");

                    b.Property<string>("InvoiceMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("invoice_method")
                        .HasDefaultValueSql("'print'");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("membership_type")
                        .HasDefaultValueSql("'private'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone1")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone1");

                    b.Property<string>("Reference")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reference");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'primary'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AddressId" }, "customers_address_id_foreign");

                    b.HasIndex(new[] { "CustomerRefId" }, "customers_customer_ref_id_foreign");

                    b.HasIndex(new[] { "MembershipType" }, "customers_membership_type_index");

                    b.HasIndex(new[] { "Type" }, "customers_type_index");

                    b.ToTable("customers", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CustomerDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'cleaning'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<uint?>("UsageLimit")
                        .HasColumnType("int unsigned")
                        .HasColumnName("usage_limit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedAt" }, "customer_discounts_created_at_index");

                    b.HasIndex(new[] { "EndDate" }, "customer_discounts_end_date_index");

                    b.HasIndex(new[] { "StartDate" }, "customer_discounts_start_date_index");

                    b.HasIndex(new[] { "Type" }, "customer_discounts_type_index");

                    b.HasIndex(new[] { "UserId" }, "customer_discounts_user_id_foreign");

                    b.ToTable("customer_discounts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CustomerUser", b =>
                {
                    b.Property<long>("MyRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("my_row_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("MyRowId"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("MyRowId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "customer_user_customer_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "customer_user_user_id_foreign");

                    b.ToTable("customer_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Deviation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_handled");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("ScheduleCleaningId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ScheduleCleaningId" }, "deviations_schedule_cleaning_id_foreign");

                    b.HasIndex(new[] { "Type" }, "deviations_type_index");

                    b.HasIndex(new[] { "UserId" }, "deviations_user_id_foreign");

                    b.ToTable("deviations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DialCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dial_code");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FortnoxId")
                        .HasColumnType("text")
                        .HasColumnName("fortnox_id");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_number");

                    b.Property<bool>("IsValidIdentity")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_valid_identity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone1")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone1");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AddressId" }, "employees_address_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "employees_user_id_foreign");

                    b.ToTable("employees", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.FailedJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("exception");

                    b.Property<DateTime>("FailedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("failed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payload");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("queue");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Uuid" }, "failed_jobs_uuid_unique")
                        .IsUnique();

                    b.ToTable("failed_jobs", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("FeedbackableId")
                        .HasColumnType("bigint")
                        .HasColumnName("feedbackable_id");

                    b.Property<string>("FeedbackableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("feedbackable_type");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("option");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FeedbackableType", "FeedbackableId" }, "feedbacks_feedbackable_type_feedbackable_id_index");

                    b.ToTable("feedbacks", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.FixedPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsPerOrder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_per_order");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedAt" }, "fixed_prices_created_at_index");

                    b.HasIndex(new[] { "UserId" }, "fixed_prices_user_id_foreign");

                    b.ToTable("fixed_prices", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.FixedPriceRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("FixedPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("fixed_price_id");

                    b.Property<bool>("HasRut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_rut");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("price");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned")
                        .HasColumnName("quantity");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<byte>("VatGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("vat_group")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FixedPriceId" }, "fixed_price_rows_fixed_price_id_foreign");

                    b.HasIndex(new[] { "Type" }, "fixed_price_rows_type_index");

                    b.ToTable("fixed_price_rows", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.GlobalSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Key" }, "global_settings_key_index");

                    b.HasIndex(new[] { "Value" }, "global_settings_value_index");

                    b.ToTable("global_settings", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DueAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("due_at");

                    b.Property<long?>("FortnoxInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("fortnox_invoice_id");

                    b.Property<long?>("FortnoxTaxReductionId")
                        .HasColumnType("bigint")
                        .HasColumnName("fortnox_tax_reduction_id");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("month");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'open'");

                    b.Property<decimal>("TotalGross")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total_gross");

                    b.Property<decimal>("TotalNet")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total_net");

                    b.Property<decimal>("TotalRut")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total_rut");

                    b.Property<decimal>("TotalVat")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total_vat");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "invoices_customer_id_foreign");

                    b.HasIndex(new[] { "Month" }, "invoices_month_index");

                    b.HasIndex(new[] { "Status" }, "invoices_status_index");

                    b.HasIndex(new[] { "Type" }, "invoices_type_index");

                    b.HasIndex(new[] { "UserId" }, "invoices_user_id_foreign");

                    b.HasIndex(new[] { "Year" }, "invoices_year_index");

                    b.ToTable("invoices", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.KeyPlace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PropertyId" }, "key_places_property_id_foreign");

                    b.ToTable("key_places", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.LeaveRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime")
                        .HasColumnName("end_at");

                    b.Property<bool>("IsStopped")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_stopped");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime")
                        .HasColumnName("start_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "leave_registrations_employee_id_foreign");

                    b.ToTable("leave_registrations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.LeaveRegistrationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime")
                        .HasColumnName("end_at");

                    b.Property<string>("FortnoxAbsenceTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fortnox_absence_transaction_id");

                    b.Property<long>("LeaveRegistrationId")
                        .HasColumnType("bigint")
                        .HasColumnName("leave_registration_id");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime")
                        .HasColumnName("start_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LeaveRegistrationId" }, "leave_registration_details_leave_registration_id_foreign");

                    b.ToTable("leave_registration_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Metum", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key");

                    b.Property<long>("MetableId")
                        .HasColumnType("bigint")
                        .HasColumnName("metable_id");

                    b.Property<string>("MetableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("metable_type");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("published_at");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MetableId", "MetableType", "Key", "PublishedAt" }, "meta_metable_id_metable_type_key_published_at_index");

                    b.HasIndex(new[] { "MetableId", "MetableType", "PublishedAt" }, "meta_metable_id_metable_type_published_at_index");

                    b.HasIndex(new[] { "MetableType", "MetableId" }, "meta_metable_type_metable_id_index");

                    b.ToTable("meta", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Migration", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<int>("Batch")
                        .HasColumnType("int")
                        .HasColumnName("batch");

                    b.Property<string>("Migration1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("migration");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("migrations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ModelHasPermission", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("ModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.HasKey("PermissionId", "ModelId", "ModelType")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "ModelId", "ModelType" }, "model_has_permissions_model_id_model_type_index");

                    b.ToTable("model_has_permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ModelHasRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("ModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.HasKey("RoleId", "ModelId", "ModelType")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "ModelId", "ModelType" }, "model_has_roles_model_id_model_type_index");

                    b.ToTable("model_has_roles", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.MonthlyWorkHour", b =>
                {
                    b.Property<decimal>("AdjustmentHours")
                        .HasPrecision(51, 4)
                        .HasColumnType("decimal(51,4)")
                        .HasColumnName("adjustment_hours");

                    b.Property<decimal>("BookingHours")
                        .HasPrecision(47, 4)
                        .HasColumnType("decimal(47,4)")
                        .HasColumnName("booking_hours");

                    b.Property<string>("FortnoxId")
                        .HasColumnType("text")
                        .HasColumnName("fortnox_id")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("Fullname")
                        .HasMaxLength(511)
                        .HasColumnType("varchar(511)")
                        .HasColumnName("fullname")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int?>("Month")
                        .HasColumnType("int")
                        .HasColumnName("month");

                    b.Property<long>("ScheduleCleaningDeviation")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_deviation");

                    b.Property<long>("ScheduleEmployeeDeviation")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_employee_deviation");

                    b.Property<decimal?>("TotalWorkHours")
                        .HasPrecision(47, 4)
                        .HasColumnType("decimal(47,4)")
                        .HasColumnName("total_work_hours");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.ToTable((string)null);

                    b.ToView("monthly_work_hours", (string)null);
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Hub")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("hub");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "notifications_user_id_foreign");

                    b.ToTable("notifications", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OauthRemoteToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AccessExpiresAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("access_expires_at");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("app_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("RefreshExpiresAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("refresh_expires_at");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scope");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AppName" }, "oauth_remote_tokens_app_name_unique")
                        .IsUnique();

                    b.ToTable("oauth_remote_tokens", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OldCustomer", b =>
                {
                    b.Property<long>("MyRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("my_row_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("MyRowId"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long>("OldCustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_customer_id");

                    b.HasKey("MyRowId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "old_customers_customer_id_foreign");

                    b.ToTable("old_customers", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OldOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OldOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_order_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("old_orders", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<long?>("OrderFixedPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_fixed_price_id");

                    b.Property<long>("OrderableId")
                        .HasColumnType("bigint")
                        .HasColumnName("orderable_id");

                    b.Property<string>("OrderableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("orderable_type");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ordered_at");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("paid_at");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("paid_by")
                        .HasDefaultValueSql("'invoice'");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'draft'");

                    b.Property<long?>("SubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderableType", "OrderableId" }, "orderable_index");

                    b.HasIndex(new[] { "CustomerId" }, "orders_customer_id_foreign");

                    b.HasIndex(new[] { "InvoiceId" }, "orders_invoice_id_foreign");

                    b.HasIndex(new[] { "OrderFixedPriceId" }, "orders_order_fixed_price_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "orders_service_id_foreign");

                    b.HasIndex(new[] { "SubscriptionId" }, "orders_subscription_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "orders_user_id_foreign");

                    b.ToTable("orders", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OrderFixedPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("FixedPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("fixed_price_id");

                    b.Property<bool>("IsPerOrder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_per_order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FixedPriceId" }, "order_fixed_prices_fixed_price_id_foreign");

                    b.ToTable("order_fixed_prices", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OrderFixedPriceRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<sbyte>("HasRut")
                        .HasColumnType("tinyint")
                        .HasColumnName("has_rut");

                    b.Property<long>("OrderFixedPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_fixed_price_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("price");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned")
                        .HasColumnName("quantity");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<byte>("VatGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("vat_group")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderFixedPriceId" }, "order_fixed_price_rows_order_fixed_price_id_foreign");

                    b.ToTable("order_fixed_price_rows", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OrderRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte>("DiscountPercentage")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("FortnoxArticleId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fortnox_article_id");

                    b.Property<bool>("HasRut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_rut");

                    b.Property<string>("InternalNote")
                        .HasColumnType("text")
                        .HasColumnName("internal_note");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<short>("Vat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("vat")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "order_rows_order_id_foreign");

                    b.ToTable("order_rows", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PasswordResetToken", b =>
                {
                    b.Property<long>("MyRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("my_row_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("MyRowId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.HasKey("MyRowId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "password_reset_tokens_email_index");

                    b.ToTable("password_reset_tokens", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("GuardName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guard_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name", "GuardName" }, "permissions_name_guard_name_unique")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PersonalAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abilities")
                        .HasColumnType("text")
                        .HasColumnName("abilities");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_used_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("token");

                    b.Property<long>("TokenableId")
                        .HasColumnType("bigint")
                        .HasColumnName("tokenable_id");

                    b.Property<string>("TokenableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tokenable_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "personal_access_tokens_name_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Token" }, "personal_access_tokens_token_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "TokenableType", "TokenableId" }, "personal_access_tokens_tokenable_type_tokenable_id_index");

                    b.ToTable("personal_access_tokens", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PriceAdjustment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CauserId")
                        .HasColumnType("bigint")
                        .HasColumnName("causer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("ExecutionDate")
                        .HasColumnType("date")
                        .HasColumnName("execution_date");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("price");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("price_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CauserId" }, "price_adjustments_causer_id_foreign");

                    b.ToTable("price_adjustments", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PriceAdjustmentRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AdjustableId")
                        .HasColumnType("bigint")
                        .HasColumnName("adjustable_id");

                    b.Property<string>("AdjustableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("adjustable_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<decimal>("PreviousPrice")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("previous_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("price");

                    b.Property<long>("PriceAdjustmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_adjustment_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<byte>("VatGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("vat_group")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AdjustableType", "AdjustableId" }, "price_adjustment_rows_adjustable_type_adjustable_id_index");

                    b.HasIndex(new[] { "PriceAdjustmentId" }, "price_adjustment_rows_price_adjustment_id_foreign");

                    b.ToTable("price_adjustment_rows", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ushort?>("CreditPrice")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("credit_price");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FortnoxArticleId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fortnox_article_id");

                    b.Property<bool>("HasRut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_rut");

                    b.Property<bool>("InApp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("in_app");

                    b.Property<bool>("InStore")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("in_store");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("price");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<string>("ThumbnailImage")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_image");

                    b.Property<string>("Unit")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<byte>("VatGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("vat_group")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "products_category_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "products_service_id_foreign");

                    b.ToTable("products", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("product_categories", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("KeyInformation")
                        .HasColumnType("json")
                        .HasColumnName("key_information");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("membership_type")
                        .HasDefaultValueSql("'private'");

                    b.Property<long>("PropertyTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_type_id");

                    b.Property<decimal>("SquareMeter")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("square_meter");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AddressId" }, "properties_address_id_foreign");

                    b.HasIndex(new[] { "MembershipType" }, "properties_membership_type_index");

                    b.HasIndex(new[] { "PropertyTypeId" }, "properties_property_type_id_foreign");

                    b.ToTable("properties", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PropertyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("property_types", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PropertyUser", b =>
                {
                    b.Property<long>("MyRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("my_row_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("MyRowId"));

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("MyRowId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PropertyId" }, "property_user_property_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "property_user_user_id_foreign");

                    b.ToTable("property_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("GuardName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guard_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name", "GuardName" }, "roles_name_guard_name_unique")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.RutCoApplicant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DialCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dial_code");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_number");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("PauseEndDate")
                        .HasColumnType("date")
                        .HasColumnName("pause_end_date");

                    b.Property<DateOnly?>("PauseStartDate")
                        .HasColumnType("date")
                        .HasColumnName("pause_start_date");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "rut_co_applicants_user_id_foreign");

                    b.ToTable("rut_co_applicants", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CancelableId")
                        .HasColumnType("bigint")
                        .HasColumnName("cancelable_id");

                    b.Property<string>("CancelableType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancelable_type");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("canceled_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_at");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_fixed");

                    b.Property<string>("KeyInformation")
                        .HasColumnType("text")
                        .HasColumnName("key_information");

                    b.Property<string>("Note")
                        .HasColumnType("json")
                        .HasColumnName("note");

                    b.Property<DateTime?>("OriginalStartAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("original_start_at");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<short?>("Quarters")
                        .HasColumnType("smallint")
                        .HasColumnName("quarters");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'booked'");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("subscription_id");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CancelableType", "CancelableId" }, "schedule_cleanings_cancelable_index");

                    b.HasIndex(new[] { "CustomerId" }, "schedule_cleanings_customer_id_foreign");

                    b.HasIndex(new[] { "EndAt" }, "schedule_cleanings_end_at_index");

                    b.HasIndex(new[] { "PropertyId" }, "schedule_cleanings_property_id_foreign");

                    b.HasIndex(new[] { "StartAt" }, "schedule_cleanings_start_at_index");

                    b.HasIndex(new[] { "Status" }, "schedule_cleanings_status_index");

                    b.HasIndex(new[] { "SubscriptionId" }, "schedule_cleanings_subscription_id_foreign");

                    b.HasIndex(new[] { "TeamId" }, "schedule_cleanings_team_id_foreign");

                    b.ToTable("schedule_cleanings", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningChangeRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CauserId")
                        .HasColumnType("bigint")
                        .HasColumnName("causer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("EndAtChanged")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_at_changed");

                    b.Property<string>("OriginalEndAt")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("original_end_at");

                    b.Property<string>("OriginalStartAt")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("original_start_at");

                    b.Property<long>("ScheduleCleaningId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_id");

                    b.Property<DateTime?>("StartAtChanged")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_at_changed");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CauserId" }, "schedule_cleaning_change_requests_causer_id_foreign");

                    b.HasIndex(new[] { "ScheduleCleaningId" }, "schedule_cleaning_change_requests_schedule_cleaning_id_foreign");

                    b.ToTable("schedule_cleaning_change_requests", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningDeviation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_handled");

                    b.Property<string>("Meta")
                        .HasColumnType("json")
                        .HasColumnName("meta");

                    b.Property<long>("ScheduleCleaningId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_id");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("types");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ScheduleCleaningId" }, "schedule_cleaning_deviations_schedule_cleaning_id_foreign");

                    b.ToTable("schedule_cleaning_deviations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<byte>("DiscountPercentage")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("payment_method")
                        .HasDefaultValueSql("'invoice'");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("price");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("quantity");

                    b.Property<long>("ScheduleCleaningId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "schedule_cleaning_products_product_id_foreign");

                    b.HasIndex(new[] { "ScheduleCleaningId" }, "schedule_cleaning_products_schedule_cleaning_id_foreign");

                    b.ToTable("schedule_cleaning_products", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomTaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("custom_task_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_completed");

                    b.Property<long>("ScheduleCleaningId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_cleaning_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomTaskId" }, "schedule_cleaning_tasks_custom_task_id_foreign");

                    b.HasIndex(new[] { "ScheduleCleaningId" }, "schedule_cleaning_tasks_schedule_cleaning_id_foreign");

                    b.ToTable("schedule_cleaning_tasks", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_at");

                    b.Property<string>("EndIp")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("end_ip");

                    b.Property<decimal?>("EndLatitude")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("end_latitude");

                    b.Property<decimal?>("EndLongitude")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("end_longitude");

                    b.Property<long>("ScheduleableId")
                        .HasColumnType("bigint")
                        .HasColumnName("scheduleable_id");

                    b.Property<string>("ScheduleableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("scheduleable_type");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_at");

                    b.Property<string>("StartIp")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("start_ip");

                    b.Property<decimal?>("StartLatitude")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("start_latitude");

                    b.Property<decimal?>("StartLongitude")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("start_longitude");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("WorkHourId")
                        .HasColumnType("bigint")
                        .HasColumnName("work_hour_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ScheduleableType", "ScheduleableId" }, "schedule_employeeableable_index");

                    b.HasIndex(new[] { "Status" }, "schedule_employees_status_index");

                    b.HasIndex(new[] { "UserId" }, "schedule_employees_user_id_foreign");

                    b.HasIndex(new[] { "WorkHourId" }, "schedule_employees_work_hour_id_foreign");

                    b.ToTable("schedule_employees", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("contact_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("district_id");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_at");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'draft'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("schedule_stores", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleStoreDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BeginsAtChanged")
                        .HasColumnType("datetime")
                        .HasColumnName("begins_at_changed");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("EndsAtChanged")
                        .HasColumnType("datetime")
                        .HasColumnName("ends_at_changed");

                    b.Property<int>("ScheduleStoreId")
                        .HasColumnType("int")
                        .HasColumnName("schedule_store_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("schedule_store_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FortnoxArticleId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fortnox_article_id");

                    b.Property<bool>("HasRut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_rut");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("price");

                    b.Property<string>("ThumbnailImage")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_image");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<byte>("VatGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("vat_group")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Type" }, "services_type_index");

                    b.ToTable("services", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ServiceQuarter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("MaxSquareMeters")
                        .HasColumnType("int unsigned")
                        .HasColumnName("max_square_meters");

                    b.Property<uint>("MinSquareMeters")
                        .HasColumnType("int unsigned")
                        .HasColumnName("min_square_meters");

                    b.Property<uint>("Quarters")
                        .HasColumnType("int unsigned")
                        .HasColumnName("quarters");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ServiceId" }, "service_quarters_service_id_foreign");

                    b.ToTable("service_quarters", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<TimeOnly>("EndTimeAt")
                        .HasColumnType("time")
                        .HasColumnName("end_time_at");

                    b.Property<long?>("FixedPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("fixed_price_id");

                    b.Property<short>("Frequency")
                        .HasColumnType("smallint")
                        .HasColumnName("frequency");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_fixed");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_paused");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<short>("Quarters")
                        .HasColumnType("smallint")
                        .HasColumnName("quarters");

                    b.Property<short>("RefillSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("refill_sequence")
                        .HasDefaultValueSql("'12'");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<TimeOnly>("StartTimeAt")
                        .HasColumnType("time")
                        .HasColumnName("start_time_at");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "subscriptions_customer_id_foreign");

                    b.HasIndex(new[] { "FixedPriceId" }, "subscriptions_fixed_price_id_foreign");

                    b.HasIndex(new[] { "PropertyId" }, "subscriptions_property_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "subscriptions_service_id_foreign");

                    b.HasIndex(new[] { "TeamId" }, "subscriptions_team_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "subscriptions_user_id_foreign");

                    b.ToTable("subscriptions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.SubscriptionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("PriceEstablish")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("price_establish");

                    b.Property<decimal>("PriceMaterial")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("price_material");

                    b.Property<decimal>("PricePerQuarters")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("price_per_quarters");

                    b.Property<decimal>("PricePerSquarefeet")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("price_per_squarefeet");

                    b.Property<int>("Squarefeet")
                        .HasColumnType("int")
                        .HasColumnName("squarefeet");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("VatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vat_id")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("subscription_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.SubscriptionProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "subscription_product_product_id_foreign");

                    b.HasIndex(new[] { "SubscriptionId" }, "subscription_product_subscription_id_foreign");

                    b.ToTable("subscription_product", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.SubscriptionStaffDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Quarters")
                        .HasColumnType("int")
                        .HasColumnName("quarters");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SubscriptionId" }, "subscription_staff_details_subscription_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "subscription_staff_details_user_id_foreign");

                    b.ToTable("subscription_staff_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomTaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("custom_task_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<long>("ScheduleEmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_employee_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomTaskId" }, "tasks_custom_task_id_foreign");

                    b.HasIndex(new[] { "ScheduleEmployeeId" }, "tasks_schedule_employee_id_foreign");

                    b.ToTable("tasks", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Color")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("teams", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.TeamUser", b =>
                {
                    b.Property<long>("MyRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("my_row_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("MyRowId"));

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("MyRowId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TeamId" }, "team_user_team_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "team_user_user_id_foreign");

                    b.ToTable("team_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.TimeAdjustment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CauserId")
                        .HasColumnType("bigint")
                        .HasColumnName("causer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<sbyte>("Quarters")
                        .HasColumnType("tinyint")
                        .HasColumnName("quarters");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<long>("ScheduleEmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_employee_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CauserId" }, "time_adjustments_causer_id_foreign");

                    b.HasIndex(new[] { "ScheduleEmployeeId" }, "time_adjustments_schedule_employee_id_foreign");

                    b.ToTable("time_adjustments", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Translation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("EnUs")
                        .HasColumnType("text")
                        .HasColumnName("en_US");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key");

                    b.Property<string>("NnNo")
                        .HasColumnType("text")
                        .HasColumnName("nn_NO");

                    b.Property<string>("SvSe")
                        .HasColumnType("text")
                        .HasColumnName("sv_SE");

                    b.Property<long>("TranslationableId")
                        .HasColumnType("bigint")
                        .HasColumnName("translationable_id");

                    b.Property<string>("TranslationableType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("translationable_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TranslationableType", "TranslationableId" }, "translationable_index");

                    b.HasIndex(new[] { "Key" }, "translations_key_index");

                    b.ToTable("translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.UnassignSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<decimal?>("FixedPrice")
                        .HasColumnType("decimal(8,2) unsigned")
                        .HasColumnName("fixed_price");

                    b.Property<short>("Frequency")
                        .HasColumnType("smallint")
                        .HasColumnName("frequency");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_fixed");

                    b.Property<string>("ProductIds")
                        .HasColumnType("json")
                        .HasColumnName("product_ids");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<short>("Quarters")
                        .HasColumnType("smallint")
                        .HasColumnName("quarters");

                    b.Property<short>("RefillSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("refill_sequence")
                        .HasDefaultValueSql("'12'");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<TimeOnly>("StartTimeAt")
                        .HasColumnType("time")
                        .HasColumnName("start_time_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "unassign_subscriptions_customer_id_foreign");

                    b.HasIndex(new[] { "PropertyId" }, "unassign_subscriptions_property_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "unassign_subscriptions_service_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "unassign_subscriptions_user_id_foreign");

                    b.ToTable("unassign_subscriptions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cellphone")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cellphone");

                    b.Property<DateTime?>("CellphoneVerifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("cellphone_verified_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DialCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dial_code");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("text")
                        .HasColumnName("identity_number");

                    b.Property<DateTime?>("IdentityNumberVerifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("identity_number_verified_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_seen");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("RememberToken")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("remember_token");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cellphone" }, "users_cellphone_index");

                    b.HasIndex(new[] { "Email" }, "users_email_unique")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.UserDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<int?>("ProductGroup")
                        .HasColumnType("int")
                        .HasColumnName("product_group");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Repeatable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("repeatable")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'cleaning'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidFromAt")
                        .HasColumnType("datetime")
                        .HasColumnName("valid_from_at");

                    b.Property<DateTime?>("ValidToAt")
                        .HasColumnType("datetime")
                        .HasColumnName("valid_to_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user_discounts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.UserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Language")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("language");

                    b.Property<sbyte?>("Marketing")
                        .HasColumnType("tinyint")
                        .HasColumnName("marketing");

                    b.Property<string>("NotificationMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notification_method")
                        .HasDefaultValueSql("'app'");

                    b.Property<string>("Timezone")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("timezone");

                    b.Property<string>("TwoFactorAuth")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("two_factor_auth")
                        .HasDefaultValueSql("'disabled'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user_infos", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.UserOtp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expire_at");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("info");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("otp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user_otps", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.UserSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Key" }, "user_settings_key_index");

                    b.HasIndex(new[] { "Type" }, "user_settings_type_index");

                    b.HasIndex(new[] { "UserId" }, "user_settings_user_id_foreign");

                    b.HasIndex(new[] { "Value" }, "user_settings_value_index");

                    b.ToTable("user_settings", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.WorkHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<string>("FortnoxAttendanceId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fortnox_attendance_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Date" }, "work_hours_date_index");

                    b.HasIndex(new[] { "UserId" }, "work_hours_user_id_foreign");

                    b.ToTable("work_hours", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("RoleHasPermission", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("PermissionId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "role_has_permissions_role_id_foreign");

                    b.ToTable("role_has_permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Address", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("addresses_city_id_foreign");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.City", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cities_country_id_foreign");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Credit", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "Issuer")
                        .WithMany("CreditIssuers")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("credits_issuer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", "ScheduleCleaning")
                        .WithMany("Credits")
                        .HasForeignKey("ScheduleCleaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("credits_schedule_cleaning_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("CreditUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("credits_user_id_foreign");

                    b.Navigation("Issuer");

                    b.Navigation("ScheduleCleaning");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CreditCreditTransaction", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Credit", "Credit")
                        .WithMany("CreditCreditTransactions")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("credit_credit_transaction_credit_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.CreditTransaction", "CreditTransaction")
                        .WithMany("CreditCreditTransactions")
                        .HasForeignKey("CreditTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("credit_credit_transaction_credit_transaction_id_foreign");

                    b.Navigation("Credit");

                    b.Navigation("CreditTransaction");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CreditTransaction", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "Issuer")
                        .WithMany("CreditTransactionIssuers")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("credit_transactions_issuer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", "ScheduleCleaning")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("ScheduleCleaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("credit_transactions_schedule_cleaning_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("CreditTransactionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("credit_transactions_user_id_foreign");

                    b.Navigation("Issuer");

                    b.Navigation("ScheduleCleaning");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Customer", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("customers_address_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "CustomerRef")
                        .WithMany("InverseCustomerRef")
                        .HasForeignKey("CustomerRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("customers_customer_ref_id_foreign");

                    b.Navigation("Address");

                    b.Navigation("CustomerRef");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CustomerDiscount", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("CustomerDiscounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("customer_discounts_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CustomerUser", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("customer_user_customer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("customer_user_user_id_foreign");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Deviation", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", "ScheduleCleaning")
                        .WithMany("Deviations")
                        .HasForeignKey("ScheduleCleaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("deviations_schedule_cleaning_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Deviations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("deviations_user_id_foreign");

                    b.Navigation("ScheduleCleaning");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Employee", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employees_address_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employees_user_id_foreign");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.FixedPrice", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("FixedPrices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fixed_prices_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.FixedPriceRow", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.FixedPrice", "FixedPrice")
                        .WithMany("FixedPriceRows")
                        .HasForeignKey("FixedPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fixed_price_rows_fixed_price_id_foreign");

                    b.Navigation("FixedPrice");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Invoice", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invoices_customer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invoices_user_id_foreign");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.KeyPlace", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Property", "Property")
                        .WithMany("KeyPlaces")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("key_places_property_id_foreign");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.LeaveRegistration", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Employee", "Employee")
                        .WithMany("LeaveRegistrations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("leave_registrations_employee_id_foreign");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.LeaveRegistrationDetail", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.LeaveRegistration", "LeaveRegistration")
                        .WithMany("LeaveRegistrationDetails")
                        .HasForeignKey("LeaveRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("leave_registration_details_leave_registration_id_foreign");

                    b.Navigation("LeaveRegistration");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ModelHasPermission", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Permission", "Permission")
                        .WithMany("ModelHasPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_has_permissions_permission_id_foreign");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ModelHasRole", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Role", "Role")
                        .WithMany("ModelHasRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_has_roles_role_id_foreign");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Notification", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notifications_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OldCustomer", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "Customer")
                        .WithMany("OldCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("old_customers_customer_id_foreign");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Order", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("orders_customer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Invoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orders_invoice_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.OrderFixedPrice", "OrderFixedPrice")
                        .WithMany("Orders")
                        .HasForeignKey("OrderFixedPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orders_order_fixed_price_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orders_service_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Subscription", "Subscription")
                        .WithMany("Orders")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orders_subscription_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("orders_user_id_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("OrderFixedPrice");

                    b.Navigation("Service");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OrderFixedPrice", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.FixedPrice", "FixedPrice")
                        .WithMany("OrderFixedPrices")
                        .HasForeignKey("FixedPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("order_fixed_prices_fixed_price_id_foreign");

                    b.Navigation("FixedPrice");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OrderFixedPriceRow", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.OrderFixedPrice", "OrderFixedPrice")
                        .WithMany("OrderFixedPriceRows")
                        .HasForeignKey("OrderFixedPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_fixed_price_rows_order_fixed_price_id_foreign");

                    b.Navigation("OrderFixedPrice");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OrderRow", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Order", "Order")
                        .WithMany("OrderRows")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_rows_order_id_foreign");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PriceAdjustment", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "Causer")
                        .WithMany("PriceAdjustments")
                        .HasForeignKey("CauserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("price_adjustments_causer_id_foreign");

                    b.Navigation("Causer");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PriceAdjustmentRow", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.PriceAdjustment", "PriceAdjustment")
                        .WithMany("PriceAdjustmentRows")
                        .HasForeignKey("PriceAdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("price_adjustment_rows_price_adjustment_id_foreign");

                    b.Navigation("PriceAdjustment");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Product", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("products_category_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Service", "Service")
                        .WithMany("Products")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("products_service_id_foreign");

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Property", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Address", "Address")
                        .WithMany("Properties")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("properties_address_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("properties_property_type_id_foreign");

                    b.Navigation("Address");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PropertyUser", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Property", "Property")
                        .WithMany("PropertyUsers")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("property_user_property_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("PropertyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("property_user_user_id_foreign");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.RutCoApplicant", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("RutCoApplicants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rut_co_applicants_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "Customer")
                        .WithMany("ScheduleCleanings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleanings_customer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Property", "Property")
                        .WithMany("ScheduleCleanings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleanings_property_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Subscription", "Subscription")
                        .WithMany("ScheduleCleanings")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleanings_subscription_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Team", "Team")
                        .WithMany("ScheduleCleanings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleanings_team_id_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Property");

                    b.Navigation("Subscription");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningChangeRequest", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "Causer")
                        .WithMany("ScheduleCleaningChangeRequests")
                        .HasForeignKey("CauserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("schedule_cleaning_change_requests_causer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", "ScheduleCleaning")
                        .WithMany("ScheduleCleaningChangeRequests")
                        .HasForeignKey("ScheduleCleaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleaning_change_requests_schedule_cleaning_id_foreign");

                    b.Navigation("Causer");

                    b.Navigation("ScheduleCleaning");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningDeviation", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", "ScheduleCleaning")
                        .WithMany("ScheduleCleaningDeviations")
                        .HasForeignKey("ScheduleCleaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleaning_deviations_schedule_cleaning_id_foreign");

                    b.Navigation("ScheduleCleaning");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningProduct", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Product", "Product")
                        .WithMany("ScheduleCleaningProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleaning_products_product_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", "ScheduleCleaning")
                        .WithMany("ScheduleCleaningProducts")
                        .HasForeignKey("ScheduleCleaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleaning_products_schedule_cleaning_id_foreign");

                    b.Navigation("Product");

                    b.Navigation("ScheduleCleaning");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaningTask", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.CustomTask", "CustomTask")
                        .WithMany("ScheduleCleaningTasks")
                        .HasForeignKey("CustomTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleaning_tasks_custom_task_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", "ScheduleCleaning")
                        .WithMany("ScheduleCleaningTasks")
                        .HasForeignKey("ScheduleCleaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_cleaning_tasks_schedule_cleaning_id_foreign");

                    b.Navigation("CustomTask");

                    b.Navigation("ScheduleCleaning");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleEmployee", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("ScheduleEmployees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedule_employees_user_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.WorkHour", "WorkHour")
                        .WithMany("ScheduleEmployees")
                        .HasForeignKey("WorkHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("schedule_employees_work_hour_id_foreign");

                    b.Navigation("User");

                    b.Navigation("WorkHour");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ServiceQuarter", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Service", "Service")
                        .WithMany("ServiceQuarters")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("service_quarters_service_id_foreign");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Subscription", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscriptions_customer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.FixedPrice", "FixedPrice")
                        .WithMany("Subscriptions")
                        .HasForeignKey("FixedPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("subscriptions_fixed_price_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Property", "Property")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscriptions_property_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Service", "Service")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscriptions_service_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Team", "Team")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("subscriptions_team_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscriptions_user_id_foreign");

                    b.Navigation("Customer");

                    b.Navigation("FixedPrice");

                    b.Navigation("Property");

                    b.Navigation("Service");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.SubscriptionProduct", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Product", "Product")
                        .WithMany("SubscriptionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscription_product_product_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Subscription", "Subscription")
                        .WithMany("SubscriptionProducts")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscription_product_subscription_id_foreign");

                    b.Navigation("Product");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.SubscriptionStaffDetail", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Subscription", "Subscription")
                        .WithMany("SubscriptionStaffDetails")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscription_staff_details_subscription_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("SubscriptionStaffDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscription_staff_details_user_id_foreign");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Task", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.CustomTask", "CustomTask")
                        .WithMany("Tasks")
                        .HasForeignKey("CustomTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tasks_custom_task_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleEmployee", "ScheduleEmployee")
                        .WithMany("Tasks")
                        .HasForeignKey("ScheduleEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tasks_schedule_employee_id_foreign");

                    b.Navigation("CustomTask");

                    b.Navigation("ScheduleEmployee");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.TeamUser", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("team_user_team_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("team_user_user_id_foreign");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.TimeAdjustment", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "Causer")
                        .WithMany("TimeAdjustments")
                        .HasForeignKey("CauserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("time_adjustments_causer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.ScheduleEmployee", "ScheduleEmployee")
                        .WithMany("TimeAdjustments")
                        .HasForeignKey("ScheduleEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("time_adjustments_schedule_employee_id_foreign");

                    b.Navigation("Causer");

                    b.Navigation("ScheduleEmployee");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.UnassignSubscription", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Customer", "Customer")
                        .WithMany("UnassignSubscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("unassign_subscriptions_customer_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Property", "Property")
                        .WithMany("UnassignSubscriptions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("unassign_subscriptions_property_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Service", "Service")
                        .WithMany("UnassignSubscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("unassign_subscriptions_service_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("UnassignSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("unassign_subscriptions_user_id_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Property");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.UserSetting", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_settings_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.WorkHour", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("WorkHours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("work_hours_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleHasPermission", b =>
                {
                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_has_permissions_permission_id_foreign");

                    b.HasOne("Downstairs.Infrastructure.Persistence.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_has_permissions_role_id_foreign");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Credit", b =>
                {
                    b.Navigation("CreditCreditTransactions");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CreditTransaction", b =>
                {
                    b.Navigation("CreditCreditTransactions");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.CustomTask", b =>
                {
                    b.Navigation("ScheduleCleaningTasks");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Customer", b =>
                {
                    b.Navigation("CustomerUsers");

                    b.Navigation("InverseCustomerRef");

                    b.Navigation("Invoices");

                    b.Navigation("OldCustomers");

                    b.Navigation("Orders");

                    b.Navigation("ScheduleCleanings");

                    b.Navigation("Subscriptions");

                    b.Navigation("UnassignSubscriptions");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Employee", b =>
                {
                    b.Navigation("LeaveRegistrations");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.FixedPrice", b =>
                {
                    b.Navigation("FixedPriceRows");

                    b.Navigation("OrderFixedPrices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Invoice", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.LeaveRegistration", b =>
                {
                    b.Navigation("LeaveRegistrationDetails");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Order", b =>
                {
                    b.Navigation("OrderRows");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.OrderFixedPrice", b =>
                {
                    b.Navigation("OrderFixedPriceRows");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Permission", b =>
                {
                    b.Navigation("ModelHasPermissions");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PriceAdjustment", b =>
                {
                    b.Navigation("PriceAdjustmentRows");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Product", b =>
                {
                    b.Navigation("ScheduleCleaningProducts");

                    b.Navigation("SubscriptionProducts");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Property", b =>
                {
                    b.Navigation("KeyPlaces");

                    b.Navigation("PropertyUsers");

                    b.Navigation("ScheduleCleanings");

                    b.Navigation("Subscriptions");

                    b.Navigation("UnassignSubscriptions");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Role", b =>
                {
                    b.Navigation("ModelHasRoles");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleCleaning", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("Credits");

                    b.Navigation("Deviations");

                    b.Navigation("ScheduleCleaningChangeRequests");

                    b.Navigation("ScheduleCleaningDeviations");

                    b.Navigation("ScheduleCleaningProducts");

                    b.Navigation("ScheduleCleaningTasks");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.ScheduleEmployee", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TimeAdjustments");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Service", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("ServiceQuarters");

                    b.Navigation("Subscriptions");

                    b.Navigation("UnassignSubscriptions");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Subscription", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ScheduleCleanings");

                    b.Navigation("SubscriptionProducts");

                    b.Navigation("SubscriptionStaffDetails");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.Team", b =>
                {
                    b.Navigation("ScheduleCleanings");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.User", b =>
                {
                    b.Navigation("CreditIssuers");

                    b.Navigation("CreditTransactionIssuers");

                    b.Navigation("CreditTransactionUsers");

                    b.Navigation("CreditUsers");

                    b.Navigation("CustomerDiscounts");

                    b.Navigation("CustomerUsers");

                    b.Navigation("Deviations");

                    b.Navigation("Employees");

                    b.Navigation("FixedPrices");

                    b.Navigation("Invoices");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("PriceAdjustments");

                    b.Navigation("PropertyUsers");

                    b.Navigation("RutCoApplicants");

                    b.Navigation("ScheduleCleaningChangeRequests");

                    b.Navigation("ScheduleEmployees");

                    b.Navigation("SubscriptionStaffDetails");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeamUsers");

                    b.Navigation("TimeAdjustments");

                    b.Navigation("UnassignSubscriptions");

                    b.Navigation("UserSettings");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("Downstairs.Infrastructure.Persistence.Models.WorkHour", b =>
                {
                    b.Navigation("ScheduleEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
